name: Deploy to Vercel

on:
    workflow_dispatch:
    push:
        branches:
            - main
        paths:
            - "script/**"
            - "requirements-deploy.txt"
            - "vercel.json"
    workflow_run:
        workflows: ["MLOps CI/CD Pipeline"]
        types:
            - completed

jobs:
    deploy:
        runs-on: ubuntu-latest
        if: |
            github.event_name == 'workflow_dispatch' ||
            github.event_name == 'push' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: "16"

            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Setup Vercel Project
              run: |
                  # Create .vercel directory
                  mkdir -p .vercel/output/functions/script
                  mkdir -p .vercel/output/static
                  
                  # Copy Python files
                  cp script/*.py .vercel/output/functions/script/
                  
                  # Copy requirements
                  cp requirements-deploy.txt .vercel/output/functions/
                  
                  # Copy model files if they exist
                  if [ -d "model" ]; then
                    mkdir -p .vercel/output/functions/model
                    cp -r model/* .vercel/output/functions/model/
                  fi
                  
                  # Create project.json
                  echo '{"orgId":"${{ secrets.VERCEL_ORG_ID }}","projectId":"${{ secrets.VERCEL_PROJECT_ID }}"}' > .vercel/project.json
                  
                  # Create config.json with version 3
                  echo '{
                    "version": 3,
                    "routes": [
                      {
                        "src": "/(.*)",
                        "dest": "/script/app.py"
                      }
                    ]
                  }' > .vercel/output/config.json
                  
                  # Create builds.json
                  echo '{
                    "version": 3,
                    "builds": [
                      {
                        "src": "script/app.py",
                        "use": "@vercel/python@3.1.49",
                        "config": {
                          "maxLambdaSize": "15mb",
                          "runtime": "python3.9",
                          "includeFiles": ["model/**", "script/**"]
                        }
                      }
                    ]
                  }' > .vercel/output/builds.json
                  
                  # List files for verification
                  echo "Contents of .vercel/output/functions:"
                  ls -la .vercel/output/functions
                  echo "Contents of .vercel/output/functions/script:"
                  ls -la .vercel/output/functions/script

            - name: Deploy to Vercel
              env:
                  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}