name: Deploy to Vercel

on:
    workflow_dispatch:
    push:
        branches:
            - main
        paths:
            - "script/**"
            - "requirements-deploy.txt"
            - "vercel.json"
    workflow_run:
        workflows: ["MLOps CI/CD Pipeline"]
        types:
            - completed

jobs:
    deploy:
        runs-on: ubuntu-latest
        if: |
            github.event_name == 'workflow_dispatch' ||
            github.event_name == 'push' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Setup Python
              uses: actions/setup-python@v4
              with:
                  python-version: "3.8"

            - name: Setup Node.js
              uses: actions/setup-node@v2
              with:
                  node-version: "16"

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements-deploy.txt

            - name: Prepare Vercel Build Output
              run: |
                  # Create necessary directories
                  mkdir -p .vercel/output/functions
                  mkdir -p .vercel/output/static

                  # Copy app files
                  cp -r script/* .vercel/output/functions/

                  # Create config.json
                  echo '{
                    "version": 3,
                    "routes": [
                      { "src": "/(.*)", "dest": "/app" }
                    ],
                    "functions": {
                      "app": {
                        "runtime": "python3.8",
                        "memory": 1024,
                        "maxDuration": 10
                      }
                    }
                  }' > .vercel/output/config.json

            - name: Create Vercel Project Link
              run: |
                  mkdir -p .vercel
                  echo '{"orgId":"${{ secrets.VERCEL_ORG_ID }}","projectId":"${{ secrets.VERCEL_PROJECT_ID }}"}' > .vercel/project.json

            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Deploy to Vercel
              env:
                  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
