name: MLOps CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    monitoring_setup:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Configure Grafana Cloud
              env:
                  GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}
                  GRAFANA_CLOUD_API_URL: ${{ secrets.GRAFANA_CLOUD_URL }}
                  PROMETHEUS_REMOTE_WRITE_URL: ${{ secrets.PROMETHEUS_REMOTE_WRITE_URL }}
                  LOKI_URL: ${{ secrets.LOKI_URL }}
              run: |
                  # Setup Prometheus remote write configuration dengan label tambahan
                  cat > prometheus.yml << EOF
                  global:
                    scrape_interval: 15s
                    evaluation_interval: 15s
                    external_labels:
                      environment: github_actions
                      job: mlops_training
                    
                  remote_write:
                    - url: ${PROMETHEUS_REMOTE_WRITE_URL}
                      basic_auth:
                        username: ${GRAFANA_CLOUD_API_KEY}
                        password: ${GRAFANA_CLOUD_API_KEY}
                      write_relabel_configs:
                        - source_labels: [__name__]
                          regex: '(train_loss|train_accuracy|val_loss|val_accuracy|learning_rate|epoch_time|batch_time)'
                          action: keep
                        
                  scrape_configs:
                    - job_name: 'mlops-metrics'
                      static_configs:
                        - targets: ['localhost:8000']
                      labels:
                        environment: github_actions
                  EOF

                  # Verify configuration
                  echo "Testing connection to Grafana Cloud..."
                  curl -I -H "Authorization: Bearer ${GRAFANA_CLOUD_API_KEY}" ${GRAFANA_CLOUD_API_URL}/api/health

            # Menambahkan langkah untuk memverifikasi pengiriman metrik
            - name: Test Metric Push
              env:
                  PROMETHEUS_API_KEY: ${{ secrets.PROMETHEUS_API_KEY }}
                  PROMETHEUS_USERNAME: "1902030"
                  PROMETHEUS_REMOTE_WRITE_URL: ${{ secrets.PROMETHEUS_REMOTE_WRITE_URL }}
              run: |
                  # Mengirim metrik test ke Prometheus
                  curl -v -X POST "${PROMETHEUS_REMOTE_WRITE_URL}" \
                    -u "${PROMETHEUS_USERNAME}:${PROMETHEUS_API_KEY}" \
                    -H "Content-Type: application/x-protobuf" \
                    -H "X-Prometheus-Remote-Write-Version: 0.1.0" \
                    -H "X-Scope-OrgID: ${PROMETHEUS_USERNAME}" \
                    --data-binary "@-" <<EOF
                  {
                    "metrics": [
                      {
                        "name": "test_metric",
                        "value": 1.0,
                        "timestamp": $(date +%s)000,
                        "labels": {
                          "environment": "github_actions",
                          "test": "true"
                        }
                      }
                    ]
                  }
                  EOF

            # Menambahkan langkah untuk memverifikasi pengiriman log
            - name: Test Loki Push
              env:
                  LOKI_API_KEY: ${{ secrets.LOKI_API_KEY }}
                  LOKI_USERNAME: "1050298"
                  LOKI_URL: ${{ secrets.LOKI_URL }}
              run: |
                  # Mengirim log test ke Loki
                  curl -v -X POST "${LOKI_URL}/loki/api/v1/push" \
                    -H "Content-Type: application/json" \
                    -u "${LOKI_USERNAME}:${LOKI_API_KEY}" \
                    --data-raw '{
                      "streams": [
                        {
                          "stream": {
                            "job": "mlops_training",
                            "environment": "github_actions",
                            "test": "true"
                          },
                          "values": [
                            ["'$(date +%s)000000000'", "Test log message from GitHub Actions"]
                          ]
                        }
                      ]
                    }'

    # Step 1: Build Base Image with Dependencies
    build_and_cache_dependencies:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and Push Dependency Image
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest .
                  docker push ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest

    # Step 2: Training and Evaluating Model with Prometheus and Grafana
    train_and_evaluate:
        runs-on: ubuntu-latest
        needs: build_and_cache_dependencies
        services:
            grafana:
                image: grafana/grafana:latest
                ports:
                    - 3000:3000
            mlflow:
                image: ghcr.io/mlflow/mlflow:v2.18.0rc0
                ports:
                    - 5000:5000

        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            # Set up Prometheus configuration directory and remove existing Prometheus container if exists
            - name: Set up Prometheus configuration and start Prometheus
              run: |
                  mkdir -p ./prometheus_config
                  cp prometheus.yml ./prometheus_config/prometheus.yml

                  # Stop and remove existing Prometheus container
                  docker stop prometheus || true
                  docker rm prometheus || true

                  # Start Prometheus container
                  docker run -d --name prometheus -p 9090:9090 \
                    -v $(pwd)/prometheus_config/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest

            # Debugging: Log environment variables to ensure they are set correctly
            - name: Debugging - Log environment variables
              run: |
                  echo "DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}"
                  echo "DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}"
                  echo "SUPABASE_S3_ENDPOINT: ${{ secrets.SUPABASE_S3_ENDPOINT }}"
                  echo "SUPABASE_S3_REGION: ${{ secrets.SUPABASE_S3_REGION }}"
                  echo "SUPABASE_S3_ACCESS_KEY_ID: ${{ secrets.SUPABASE_S3_ACCESS_KEY_ID }}"
                  echo "SUPABASE_S3_SECRET_ACCESS_KEY: ${{ secrets.SUPABASE_S3_SECRET_ACCESS_KEY }}"

            - name: Pull and Run Dependency Image
              env:
                  SUPABASE_S3_ENDPOINT: ${{ secrets.SUPABASE_S3_ENDPOINT }}
                  SUPABASE_S3_REGION: ${{ secrets.SUPABASE_S3_REGION }}
                  SUPABASE_S3_ACCESS_KEY_ID: ${{ secrets.SUPABASE_S3_ACCESS_KEY_ID }}
                  SUPABASE_S3_SECRET_ACCESS_KEY: ${{ secrets.SUPABASE_S3_SECRET_ACCESS_KEY }}
                  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
                  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
                  PROMETHEUS_API_KEY: ${{ secrets.PROMETHEUS_API_KEY }}
                  LOKI_API_KEY: ${{ secrets.LOKI_API_KEY }}
                  PROMETHEUS_USERNAME: "1902030"
                  LOKI_USERNAME: "1050298"
                  PROMETHEUS_REMOTE_WRITE_URL: "https://prometheus-prod-37-prod-ap-southeast-1.grafana.net/api/prom/push"
                  LOKI_URL: "https://logs-prod-020.grafana.net"
                  MLFLOW_TRACKING_URI: "https://dagshub.com/salsazufar/project-akhir-mlops.mlflow"
              run: |
                  docker pull ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest

                  docker run --rm \
                      -e SUPABASE_S3_ENDPOINT="$SUPABASE_S3_ENDPOINT" \
                      -e SUPABASE_S3_REGION="$SUPABASE_S3_REGION" \
                      -e SUPABASE_S3_ACCESS_KEY_ID="$SUPABASE_S3_ACCESS_KEY_ID" \
                      -e SUPABASE_S3_SECRET_ACCESS_KEY="$SUPABASE_S3_SECRET_ACCESS_KEY" \
                      -e DAGSHUB_USERNAME="$DAGSHUB_USERNAME" \
                      -e DAGSHUB_TOKEN="$DAGSHUB_TOKEN" \
                      -e PROMETHEUS_API_KEY="$PROMETHEUS_API_KEY" \
                      -e LOKI_API_KEY="$LOKI_API_KEY" \
                      -e PROMETHEUS_USERNAME="$PROMETHEUS_USERNAME" \
                      -e LOKI_USERNAME="$LOKI_USERNAME" \
                      -e PROMETHEUS_REMOTE_WRITE_URL="$PROMETHEUS_REMOTE_WRITE_URL" \
                      -e LOKI_URL="$LOKI_URL" \
                      -e MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" \
                      -v ${{ github.workspace }}:/app \
                      -w /app \
                      --network host \
                      ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest \
                      bash -c "
                        echo 'Starting training...' &&
                        python script/train.py &&
                        python script/test.py
                      "

    # Step 3: Build and Push Final Docker Image with Model
    build_and_push_docker:
        runs-on: ubuntu-latest
        needs: train_and_evaluate
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build Docker Image with Model
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/mlops_project:latest .

            - name: Push Docker Image
              run: |
                  docker push ${{ secrets.DOCKER_USERNAME }}/mlops_project:latest
