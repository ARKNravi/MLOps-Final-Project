name: MLOps Workflow

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:
    train_and_monitor:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up monitoring
              env:
                  GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}
                  PROMETHEUS_API_KEY: ${{ secrets.PROMETHEUS_API_KEY }}
                  LOKI_API_KEY: ${{ secrets.LOKI_API_KEY }}
                  PROMETHEUS_USERNAME: "1902030"
                  LOKI_USERNAME: "1050298"
                  PROMETHEUS_REMOTE_WRITE_URL: "https://prometheus-prod-37-prod-ap-southeast-1.grafana.net/api/prom/push"
                  LOKI_URL: "https://logs-prod-020.grafana.net"
              run: |
                  # Upload dashboard to Grafana Cloud
                  echo "Uploading dashboard to Grafana Cloud..."
                  curl -X POST \
                    -H "Authorization: Bearer ${GRAFANA_CLOUD_API_KEY}" \
                    -H "Content-Type: application/json" \
                    "https://arknravi.grafana.net/api/dashboards/db" \
                    -d @grafana/dashboards/training_metrics.json

                  # Verify Grafana Cloud connection
                  echo "Checking Grafana Cloud connection..."
                  curl -s -H "Authorization: Bearer ${GRAFANA_CLOUD_API_KEY}" \
                    "https://arknravi.grafana.net/api/health"

                  # Send test metric to Prometheus
                  echo "Sending test metric to Prometheus..."
                  curl -v -H "Content-Type: application/json" \
                    -u "${PROMETHEUS_USERNAME}:${PROMETHEUS_API_KEY}" \
                    "${PROMETHEUS_REMOTE_WRITE_URL}" \
                    --data-binary '{
                      "metrics": [{
                        "name": "test_metric",
                        "value": 1,
                        "timestamp": '$(date +%s)'000,
                        "labels": {"source": "github_action"}
                      }]
                    }'

                  # Send test log to Loki
                  echo "Sending test log to Loki..."
                  curl -v -H "Content-Type: application/json" \
                    -u "${LOKI_USERNAME}:${LOKI_API_KEY}" \
                    "${LOKI_URL}/loki/api/v1/push" \
                    --data-binary '{
                      "streams": [{
                        "stream": {
                          "job": "github_action",
                          "level": "info"
                        },
                        "values": [["'$(date +%s)'000000000", "Test log from GitHub Action"]]
                      }]
                    }'

                  # Verify data in Prometheus
                  echo "Verifying Prometheus data..."
                  sleep 5  # Wait for data to be available
                  curl -s -u "${PROMETHEUS_USERNAME}:${PROMETHEUS_API_KEY}" \
                    "https://prometheus-prod-37-prod-ap-southeast-1.grafana.net/api/prom/api/v1/query?query=test_metric"

                  # Verify data in Loki
                  echo "Verifying Loki data..."
                  curl -s -u "${LOKI_USERNAME}:${LOKI_API_KEY}" \
                    "${LOKI_URL}/loki/api/v1/query?query={job=\"github_action\"}"

            - name: Train model with monitoring
              env:
                  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
                  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
                  PROMETHEUS_API_KEY: ${{ secrets.PROMETHEUS_API_KEY }}
                  LOKI_API_KEY: ${{ secrets.LOKI_API_KEY }}
                  PROMETHEUS_USERNAME: "1902030"
                  LOKI_USERNAME: "1050298"
                  PROMETHEUS_REMOTE_WRITE_URL: "https://prometheus-prod-37-prod-ap-southeast-1.grafana.net/api/prom/push"
                  LOKI_URL: "https://logs-prod-020.grafana.net"
                  MLFLOW_TRACKING_URI: "https://dagshub.com/salsazufar/project-akhir-mlops.mlflow"
              run: |
                  docker run --rm \
                    -e DAGSHUB_USERNAME="$DAGSHUB_USERNAME" \
                    -e DAGSHUB_TOKEN="$DAGSHUB_TOKEN" \
                    -e PROMETHEUS_API_KEY="$PROMETHEUS_API_KEY" \
                    -e LOKI_API_KEY="$LOKI_API_KEY" \
                    -e PROMETHEUS_USERNAME="$PROMETHEUS_USERNAME" \
                    -e LOKI_USERNAME="$LOKI_USERNAME" \
                    -e PROMETHEUS_REMOTE_WRITE_URL="$PROMETHEUS_REMOTE_WRITE_URL" \
                    -e LOKI_URL="$LOKI_URL" \
                    -e MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" \
                    -v ${{ github.workspace }}:/app \
                    -w /app \
                    --network host \
                    ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest \
                    bash -c "python script/train.py && python script/test.py"
