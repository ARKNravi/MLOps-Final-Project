name: MLOps CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    monitoring_setup:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Configure Grafana Cloud
              env:
                  GRAFANA_CLOUD_API_KEY: ${{ secrets.GRAFANA_CLOUD_API_KEY }}
                  GRAFANA_CLOUD_API_URL: ${{ secrets.GRAFANA_CLOUD_URL }}
                  PROMETHEUS_REMOTE_WRITE_URL: ${{ secrets.PROMETHEUS_REMOTE_WRITE_URL }}
                  LOKI_URL: ${{ secrets.LOKI_URL }}
              run: |
                  cat > prometheus.yml << EOF
                  global:
                    scrape_interval: 15s
                    evaluation_interval: 15s
                    external_labels:
                      environment: github_actions
                      job: mlops_training
                    
                  remote_write:
                    - url: ${PROMETHEUS_REMOTE_WRITE_URL}
                      basic_auth:
                        username: ${GRAFANA_CLOUD_API_KEY}
                        password: ${GRAFANA_CLOUD_API_KEY}
                      write_relabel_configs:
                        - source_labels: [__name__]
                          regex: '(train_loss|train_accuracy|val_loss|val_accuracy|learning_rate|epoch_time|batch_time)'
                          action: keep
                        
                  scrape_configs:
                    - job_name: 'mlops-metrics'
                      static_configs:
                        - targets: ['localhost:8000']
                      labels:
                        environment: github_actions
                  EOF

                  # Verify configuration
                  echo "Testing connection to Grafana Cloud..."
                  curl -I -H "Authorization: Bearer ${GRAFANA_CLOUD_API_KEY}" ${GRAFANA_CLOUD_API_URL}/api/health

            # Menambahkan langkah untuk memverifikasi pengiriman metrik
            - name: Test Metric Push
              env:
                  PROMETHEUS_API_KEY: ${{ secrets.PROMETHEUS_API_KEY }}
                  PROMETHEUS_USERNAME: "1902030"
                  PROMETHEUS_REMOTE_WRITE_URL: ${{ secrets.PROMETHEUS_REMOTE_WRITE_URL }}
              run: |
                  # Install dependencies
                  sudo apt-get update && sudo apt-get install -y python3-pip
                  sudo apt-get install -y protobuf-compiler
                  pip3 install prometheus-client requests python-snappy protobuf
                  # Buat file proto secara inline
                  cat > remote_write.proto << EOF
                  syntax = "proto3";
                  package prometheus;

                  option go_package = "prompb";

                  message WriteRequest {
                    repeated TimeSeries timeseries = 1;
                  }

                  message TimeSeries {
                    repeated Label labels = 1;
                    repeated Sample samples = 2;
                  }

                  message Label {
                    string name = 1;
                    string value = 2;
                  }

                  message Sample {
                    double value = 1;
                    int64 timestamp = 2;
                  }
                  EOF

                  # Generate Python file dari proto
                  protoc --python_out=. remote_write.proto

                  # Verifikasi file yang dibuat
                  ls -la remote_write*

                  # Buat script Python untuk mengirim metrik
                  cat > send_metric.py << EOF
                  import os
                  import json
                  import snappy as python_snappy
                  import requests
                  from remote_write_pb2 import WriteRequest, TimeSeries, Label, Sample
                  from datetime import datetime, UTC

                  def send_metric():
                      # Buat timestamp dalam format yang benar (millisekon)
                      timestamp_ms = int(datetime.now(UTC).timestamp() * 1000)
                      
                      # Inisialisasi WriteRequest
                      write_req = WriteRequest()
                      
                      # Tambahkan TimeSeries
                      ts = write_req.timeseries.add()
                      
                      # Tambahkan Labels
                      labels = [
                          ("__name__", "test_metric"),
                          ("job", "github_actions_test"),
                          ("instance", "test"),
                          ("environment", "github_actions")
                      ]
                      
                      for name, value in labels:
                          label = ts.labels.add()
                          label.name = name
                          label.value = value
                      
                      # Tambahkan Sample
                      sample = ts.samples.add()
                      sample.value = 1.0
                      sample.timestamp = timestamp_ms
                      
                      # Serialize ke Protobuf
                      data = write_req.SerializeToString()
                      
                      # Kompresi dengan Snappy
                      compressed_data = python_snappy.compress(data)
                      
                      url = os.environ['PROMETHEUS_REMOTE_WRITE_URL']
                      username = os.environ['PROMETHEUS_USERNAME']
                      password = os.environ['PROMETHEUS_API_KEY']
                      
                      headers = {
                          "Content-Encoding": "snappy",
                          "Content-Type": "application/x-protobuf",
                          "X-Prometheus-Remote-Write-Version": "0.1.0"
                      }
                      
                      try:
                          response = requests.post(
                              url,
                              data=compressed_data,
                              auth=(username, password),
                              headers=headers
                          )
                          
                          print(f"Status code: {response.status_code}")
                          if response.text:
                              print(f"Response: {response.text}")
                          
                          if response.status_code in [200, 204]:
                              print("✅ Metric sent successfully")
                          else:
                              print("❌ Failed to send metric")
                              if response.text:
                                  print(f"Error: {response.text}")
                              print(f"Request URL: {url}")
                              print(f"Request headers: {headers}")
                      except Exception as e:
                          print(f"Error sending metric: {e}")
                          exit(1)
                      
                  if __name__ == "__main__":
                      send_metric()
                  EOF

                  # Jalankan script
                  python3 send_metric.py

            # Menambahkan langkah untuk memverifikasi pengiriman log
            - name: Test Loki Push
              env:
                  LOKI_API_KEY: ${{ secrets.LOKI_API_KEY }}
                  LOKI_USERNAME: "1050298"
                  LOKI_URL: ${{ secrets.LOKI_URL }}
              run: |
                  # Mengirim log test ke Loki
                  curl -v -X POST "${LOKI_URL}/loki/api/v1/push" \
                    -H "Content-Type: application/json" \
                    -u "${LOKI_USERNAME}:${LOKI_API_KEY}" \
                    --data-raw '{
                      "streams": [
                        {
                          "stream": {
                            "job": "mlops_training",
                            "environment": "github_actions",
                            "test": "true"
                          },
                          "values": [
                            ["'$(date +%s)000000000'", "Test log message from GitHub Actions"]
                          ]
                        }
                      ]
                    }'

    # Step 1: Build Base Image with Dependencies
    build_and_cache_dependencies:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and Push Dependency Image
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest .
                  docker push ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest

    # Step 2: Training and Evaluating Model with Prometheus and Grafana
    train_and_evaluate:
        runs-on: ubuntu-latest
        needs: build_and_cache_dependencies
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Install Prometheus Dependencies
              run: |
                  sudo apt-get update && sudo apt-get install -y python3-pip
                  sudo apt-get install -y protobuf-compiler
                  pip3 install prometheus-client requests python-snappy protobuf

                  # Setup Prometheus proto file
                  cat > remote_write.proto << EOF
                  syntax = "proto3";
                  package prometheus;

                  option go_package = "prompb";

                  message WriteRequest {
                    repeated TimeSeries timeseries = 1;
                  }

                  message TimeSeries {
                    repeated Label labels = 1;
                    repeated Sample samples = 2;
                  }

                  message Label {
                    string name = 1;
                    string value = 2;
                  }

                  message Sample {
                    double value = 1;
                    int64 timestamp = 2;
                  }
                  EOF

                  protoc --python_out=script/ remote_write.proto

            - name: Train and Evaluate Model
              env:
                  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
                  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
                  SUPABASE_S3_ACCESS_KEY_ID: ${{ secrets.SUPABASE_S3_ACCESS_KEY_ID }}
                  SUPABASE_S3_SECRET_ACCESS_KEY: ${{ secrets.SUPABASE_S3_SECRET_ACCESS_KEY }}
                  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
                  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
                  PROMETHEUS_API_KEY: ${{ secrets.PROMETHEUS_API_KEY }}
                  LOKI_API_KEY: ${{ secrets.LOKI_API_KEY }}
                  PROMETHEUS_USERNAME: "1902030"
                  LOKI_USERNAME: "1050298"
                  PROMETHEUS_REMOTE_WRITE_URL: ${{ secrets.PROMETHEUS_REMOTE_WRITE_URL }}
                  LOKI_URL: ${{ secrets.LOKI_URL }}
                  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
              run: |
                  docker run \
                      -e DOCKER_USERNAME="$DOCKER_USERNAME" \
                      -e DOCKER_PASSWORD="$DOCKER_PASSWORD" \
                      -e SUPABASE_S3_ACCESS_KEY_ID="$SUPABASE_S3_ACCESS_KEY_ID" \
                      -e SUPABASE_S3_SECRET_ACCESS_KEY="$SUPABASE_S3_SECRET_ACCESS_KEY" \
                      -e DAGSHUB_USERNAME="$DAGSHUB_USERNAME" \
                      -e DAGSHUB_TOKEN="$DAGSHUB_TOKEN" \
                      -e PROMETHEUS_API_KEY="$PROMETHEUS_API_KEY" \
                      -e LOKI_API_KEY="$LOKI_API_KEY" \
                      -e PROMETHEUS_USERNAME="$PROMETHEUS_USERNAME" \
                      -e LOKI_USERNAME="$LOKI_USERNAME" \
                      -e PROMETHEUS_REMOTE_WRITE_URL="$PROMETHEUS_REMOTE_WRITE_URL" \
                      -e LOKI_URL="$LOKI_URL" \
                      -e MLFLOW_TRACKING_URI="$MLFLOW_TRACKING_URI" \
                      -v ${{ github.workspace }}:/app \
                      -w /app \
                      --network host \
                      ${{ secrets.DOCKER_USERNAME }}/mlops_dependencies:latest \
                      bash -c "
                        echo 'Starting training...' &&
                        python script/train.py &&
                        python script/test.py
                      "

    # Step 3: Build and Push Final Docker Image with Model
    build_and_push_docker:
        runs-on: ubuntu-latest
        needs: train_and_evaluate
        steps:
            - name: Checkout repository
              uses: actions/checkout@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build Docker Image with Model
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/mlops_project:latest .

            - name: Push Docker Image
              run: |
                  docker push ${{ secrets.DOCKER_USERNAME }}/mlops_project:latest
